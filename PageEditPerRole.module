<?php

/**
 * Page Edit Per Role
 * =====================
 *
 * @website https://github.com/ryannmicua/PageEditPerRole
 * @author Ryann Micua <http://pogidude.com/>
 * @license GPL 3 <http://www.gnu.org/licenses/gpl-3.0.txt>
 * 
 * Assign edit access to users in a role on a per-page or per-branch basis.
 *
 * The role must already have page-edit permission in order to get 
 * edit access to assigned pages. Otherwise, they will only gain view access. 
 *
 * This module is fully functional as-is, but intended as a proof-of-concept for those wanting
 * to go further with adding custom edit and/or view access.
 *
 * Original idea is from PageEditPerRole module by Ryan Cramer, http://processwire.com
 *
 */

class PageEditPerRole extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Per Role', 
			'version' => 1, 
			'summary' => 'Assign edit access to users in a role on a per-page or per-branch basis.',
			'singular' => true, 
			'autoload' => true, 
			);
	}

	/**
	 * Attach our hooks to Page::editable and Page::viewable
	 *
	 */
	public function init() {
		$this->addHookBefore('ProcessPageAdd::execute', $this, 'hookProcessPageAddExecute');
		$this->addHookBefore('Fieldtype::savePageField', $this, 'hookSavePageField');

		$this->addHookAfter('Page::editable', $this, 'hookPageEditable'); 
		$this->addHookAfter('Page::viewable', $this, 'hookPageEditable'); 
		$this->addHookAfter('Page::addable', $this, 'hookPageAddable');

		//$this->addHookAfter('User::hasPagePermission', $this, 'hookHasPagePermission');
		$this->addHookAfter('ProcessPageAdd::getAllowedTemplates', $this, 'hookGetAllowedTemplates');


	}

	/**
	 * Check if this page, or any ancestor pages, are editable
	 *
	 * From Netcarver
	 *
	 */
	public function onMyBranch($page) {

		$user = $this->fuel('user');

		//get the roles user has
		$user_roles = $user->roles;

		//set to false until proven otherwise
		$page_on_my_branch = false;

		foreach($user_roles as $role){

			$editable_pages = $role->role_editable_pages;

			if($editable_pages->count()){

				$page_on_my_branch = $editable_pages->has($page);

				//scan ancestors if applicable
				if($this->scan_ancestors && !$page_on_my_branch){
					$parents = $page->parents;
					while(!$page_on_my_branch && count($parents)){
						$p = $parents->pop();
						$page_on_my_branch = $editable_pages->has($p);
					}
				}

				if($page_on_my_branch){
					//page is editable, return!
					return $page_on_my_branch;
				}
			}
		}

		//$page_on_my_branch = true;
		/*
		$page_on_my_branch = $this->role->role_editable_pages->has($page);
		if($this->scan_ancestors && !$page_on_my_branch) {
			$parents = $page->parents();
			while(!$page_on_my_branch && count($parents)) {
				$p = $parents->pop();
				$page_on_my_branch = $this->role->role_editable_pages->has($p);
			}
		}
		*/

		//explicitly return false?
		return $page_on_my_branch;
	}

	/**
	 * Page::editable hook
	 *
	 */
	public function hookPageEditable($event) {
		if($event->return) return;

		if($this->user->hasPermission('page-edit')) {
			$event->return = $this->onMyBranch($event->object);
		}
	}

	/**
	 * Page::viewable hook
	 *
	 */
	public function hookPageViewable($event) {
		if($event->return) return;
		$event->return = $this->onMyBranch($event->object);
	}

	/**
	 * Page::addable hook
	 */
	public function hookPageAddable($event){
		if($event->return) return;

		if($this->user->hasPermission('page-edit')){
			$event->return = $this->canAdd($event->object);
		}

	}

	protected function canAdd($page){
		$user = $this->user;

		//get the roles user has
		$user_roles = $user->roles;

		$can_add = false;

		foreach($user_roles as $role){
			if(count($role->role_add_children_pages)){

				$can_create = $role->role_add_children_pages->has($page);
				
				//scan ancestors if applicable
				if($this->scan_ancestors && !$can_create){
					$parents = $page->parents;
					while(!$can_create && count($parents)){
						$p = $parents->pop();
						$can_create = $role->role_add_children_pages->has($p);
					}
				}

				if($can_create){
					//can add pages, return!
					return $can_create;
				}
			}
		}

		return $can_add;
	}

	/**
	 * User::hasPagePermission hook
	 */
	public function hookHasPagePermission($event){
		if($event->return) return;

		$name = $event->arguments('name');
		$page = $event->arguments('page');

		//only concern ourselves with 'page-create' for now
		if($name != 'page-create') return;

		$user = $event->object;

		$event->return = true;
	}

	/**
	 * ProcessPageAdd::execute()
	 * Have to do this because if not, calling $this->parent->editable() in ProcessPageAdd::getAllowedTemplates()
	 * will remove the parent page from the role_editable_pages field. weird I know.
	 */
	public function hookProcessPageAddExecute($event){

		foreach($this->user->roles as $r){
			$r->role_editable_pages;
		}

	}

	/**
	 * ProcesspageAdd::getAllowedTemplates()
	 */
	public function hookGetAllowedTemplates($event){

		$allowed_templates = $event->return;
		$user = $this->user;

		//get all templates user is allowed to use
		$permitted = array();
		foreach($user->roles as $role){
			if(!count($role->role_permitted_templates)) continue;

			$current_permitted = array();
			$current_permitted = explode(',', $role->role_permitted_templates);
			foreach($current_permitted as $c){
				if(in_array($c, $permitted)) continue;
				$permitted[] = $c;
			}
		}

		//now add additional templates into the allowedTemplates array
		foreach($this->templates as $t){

			if(!in_array($t->name, $permitted)) continue;

			$allowed_templates[$t->id] = $t;
		}

		$event->return = $allowed_templates;
	}

	/**
	 * Fieldtype::savePageField() hook
	 * we added this hook because 
	 */
	public function hookSavePageField($event){
		$field = $event->arguments('field');
		$page = $event->arguments('page');

		$field_name = 'role_permitted_templates';
		if($field->name != $field_name) return;

		$value = $page->get($field_name);

		//sanitize
		$value = $this->sanitizer->names($value, ',', array('-', '_'));

		$page->set($field_name, $value);
	}

	/**
	 * Install the module and add the 'role_editable_pages' field to the role template
	 *
	 */
	public function ___install() {
		//*
		//add role_editable_pages
		$field_editable = new Field(); 
		$field_editable->name = 'role_editable_pages';
		$field_editable->label = 'Pages users with this role may edit';
		$field_editable->labelFieldName = 'path';
		$field_editable->type = wire('modules')->get('FieldtypePage'); 
		$field_editable->inputfield = 'InputfieldPageListSelectMultiple';
		$field_editable->description = 
			'In order to edit pages, this role must have page-edit permission or the user must also have another role with page-edit permission. ' . 
			'If they do not have page-edit permission, they will only be able to view the selected pages.';
		$field_editable->save();

		$this->message("Added field 'role_editable_pages' to the role template.");

		//add role_add_children_pages
		$field_addable = new Field();
		$field_addable->name = 'role_add_children_pages';
		$field_addable->label = 'Pages users with this role may add to';
		$field_addable->labelFieldName = 'path';
		$field_addable->type = wire('modules')->get('FieldtypePage'); 
		$field_addable->inputfield = 'InputfieldPageListSelectMultiple';
		$field_addable->description =
			'In order to add to child pages, this role must have page-edit permission or the user must also have another role with page-edit permission.';
		$field_addable->save();

		$this->message("Added field 'role_addable_pages' to the role template.");

		//add role_permitted_templates
		$field_templates = new Field();
		$field_templates->name = 'role_permitted_templates';
		$field_templates->label = 'Templates users with this role may use on pages they can add to';
		$field_templates->labelFieldName = 'template-name';
		$field_templates->type = wire('modules')->get('FieldtypeText');
		$field_templates->inputfield = 'InputfieldPageName';
		$field_templates->sanitizeMethod = 'pageName';
		$field_templates->description = 'Select the templates that users with this role can use when adding child pages to parent pages they have permission to add pages to.';
		$field_templates->save();
		$this->message("Added field 'role_permitted_templates' to the role template.");

		//now save to fieldgroup
		$fieldgroup = $this->fieldgroups->get('role');
		$fieldgroup->add($field_editable);
		$fieldgroup->add($field_addable);
		$fieldgroup->add($field_templates);
		$fieldgroup->save();
		//*/
	}

	/**
	 * Uninstall 'role_editable_pages' field
	 *
	 */
	public function ___uninstall() {
		$field_names = array(
			'role_editable_pages',
			'role_add_children_pages',
			'role_permitted_templates'
			);

		//$field = $this->fields->get('role_editable_pages');
		$fieldgroup = $this->fieldgroups->get('role');

		if($fieldgroup){
			foreach($field_names as $field_name){
				$field = null;
				$field = $this->fields->get($field_name);
				if($field){
					$fieldgroup->remove($field);
					$fieldgroup->save();
					$this->fields->delete($field);
					$this->message('Removed field: ' . $field_name);
				}

			}
		}

	}

	/**
	 * Default settings used by this module
	 *
	 */
	static protected $defaultSettings = array(
		'scan_ancestors' => 0
	);

	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();
		$data = array_merge(self::$defaultSettings, $data);

		// Scan ancestor nodes for edit permission?
		$f = wire('modules')->get('InputfieldRadios');
		$f->attr('name', 'scan_ancestors');
		$f->label = __('Consider permissions further up the branch too?', __FILE__);
		$f->addOption(0, __('No', __FILE__));
		$f->addOption(1, __('Yes', __FILE__));
		$f->attr('value', $data['scan_ancestors']);
		$fields->add($f);

		return $fields;
	}
}

