<?php

/**
 * Page Edit Per Role
 * =====================
 *
 * @website https://github.com/ryannmicua/PageEditPerRole
 * @author Ryann Micua <http://pogidude.com/>
 * @license GPL 3 <http://www.gnu.org/licenses/gpl-3.0.txt>
 * 
 * Assign edit access to users in a role on a per-page or per-branch basis.
 *
 * The role must already have page-edit permission in order to get 
 * edit access to assigned pages. Otherwise, they will only gain view access. 
 *
 * This module is fully functional as-is, but intended as a proof-of-concept for those wanting
 * to go further with adding custom edit and/or view access.
 *
 * Original idea is from PageEditPerRole module by Ryan Cramer, http://processwire.com
 *
 */

class PageEditPerRole extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Per Role', 
			'version' => 1, 
			'summary' => 'Assign edit access to users in a role on a per-page or per-branch basis.',
			'singular' => true, 
			'autoload' => true, 
			);
	}

	/**
	 * Attach our hooks to Page::editable and Page::viewable
	 *
	 */
	public function init() {
		$this->addHookAfter('Page::editable', $this, 'hookPageEditable'); 
		$this->addHookAfter('Page::viewable', $this, 'hookPageEditable'); 
	}

	/**
	 * Check if this page, or any ancestor pages, are editable
	 *
	 * From Netcarver
	 *
	 */
	public function onMyBranch($page) {

		$user = $this->user;

		//get the roles user has
		$user_roles = $user->roles;

		//set to false until proven otherwise
		$page_on_my_branch = false;

		foreach($user_roles as $role){

			if(count($role->role_editable_pages)){

				$page_on_my_branch = $role->role_editable_pages->has($page);

				//scan ancestors if applicable
				if($this->scan_ancestors && !$page_on_my_branch){
					$parents = $page->parents;
					while(!$page_on_my_branch && count($parents)){
						$p = $parents->pop();
						$page_on_my_branch = $role->role_editable_pages->has($p);
					}
				}

				if($page_on_my_branch){
					//page is editable, return!
					return $page_on_my_branch;
				}

			}
		}

		/*
		$page_on_my_branch = $this->role->role_editable_pages->has($page);
		if($this->scan_ancestors && !$page_on_my_branch) {
			$parents = $page->parents();
			while(!$page_on_my_branch && count($parents)) {
				$p = $parents->pop();
				$page_on_my_branch = $this->role->role_editable_pages->has($p);
			}
		}
		*/
		
		//explicitly return false?
		return $page_on_my_branch;
	}

	/**
	 * Page::editable hook
	 *
	 */
	public function hookPageEditable($event) {
		if($event->return) return;

		if($this->user->hasPermission('page-edit')) {
			$event->return = $this->onMyBranch($event->object);
		} else {
			$event->return = false;
		}
	}

	/**
	 * Page::viewable hook
	 *
	 */
	public function hookPageViewable($event) {
		if($event->return) return;
		$event->return = $this->onMyBranch($event->object);
	}

	/**
	 * Install the module and add the 'role_editable_pages' field to the role template
	 *
	 */
	public function ___install() {
		$field = new Field(); 
		$field->name = 'role_editable_pages';
		$field->label = 'Pages users with this role may edit';
		$field->labelFieldName = 'path';
		$field->type = wire('modules')->get('FieldtypePage'); 
		$field->inputfield = 'InputfieldPageListSelectMultiple';
		$field->description = 
			'In order to edit pages, this role must have page-edit permission or the user must also have another role with page-edit permission. ' . 
			'If they do not have page-edit permission, they will only be able to view the selected pages.';
		$field->save();

		$fieldgroup = $this->fieldgroups->get('role');
		$fieldgroup->add($field);
		$fieldgroup->save();

		$this->message("Added field 'role_editable_pages' to the role template.");
	}

	/**
	 * Uninstall 'role_editable_pages' field
	 *
	 */
	public function ___uninstall() {
		$field = $this->fields->get('role_editable_pages');
		$fieldgroup = $this->fieldgroups->get('role');
		if($field && $fieldgroup) {
			$fieldgroup->remove($field);
			$fieldgroup->save();
		}

		$this->fields->delete($field);
		$this->message("Removed field: role_editable_pages");
	}

	/**
	 * Default settings used by this module
	 *
	 */
	static protected $defaultSettings = array(
		'scan_ancestors' => 0
	);

	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();
		$data = array_merge(self::$defaultSettings, $data);

		// Scan ancestor nodes for edit permission?
		$f = wire('modules')->get('InputfieldRadios');
		$f->attr('name', 'scan_ancestors');
		$f->label = __('Consider permissions further up the branch too?', __FILE__);
		$f->addOption(0, __('No', __FILE__));
		$f->addOption(1, __('Yes', __FILE__));
		$f->attr('value', $data['scan_ancestors']);
		$fields->add($f);

		return $fields;
	}
}

